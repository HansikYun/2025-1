#제2유형

import pandas as pd
import numpy as np

train =  pd.read_csv("https://raw.githubusercontent.com/YoungjinBD/data/main/exam/4_2_train.csv")
test =  pd.read_csv("https://raw.githubusercontent.com/YoungjinBD/data/main/exam/4_2_test.csv")

print(train.info())
print(test.info())
#결측치 없음, 범주형 있음, 표준화 필요

test_id = test['ID']
train = train.drop(['ID'], axis = 1)
test = test.drop(['ID'], axis = 1)

train_x = train.drop(['Attrition_Flag'], axis = 1)
train_y = train['Attrition_Flag']
test_x = test.drop(['Attrition_Flag'], axis = 1)
test_y = test['Attrition_Flag']

from sklearn.model_selection import train_test_split
train_x, valid_x, train_y, valid_y = train_test_split(
    train_x, train_y, test_size = 0.3, random_state = 1
)

print(train_x.shape, train_y.shape, valid_x.shape, valid_y.shape)

cat_columns = train_x.select_dtypes('object').columns.to_list()
num_columns = train_x.select_dtypes('number').columns.to_list()
from sklearn.preprocessing import OneHotEncoder, StandardScaler

onehotencoder = OneHotEncoder(sparse_output = False, handle_unknown = 'ignore')
scaler = StandardScaler()

train_x_cat = onehotencoder.fit_transform(train_x[cat_columns])
valid_x_cat = onehotencoder.transform(valid_x[cat_columns])
test_x_cat = onehotencoder.transform(test_x[cat_columns])


train_x_num = scaler.fit_transform(train_x[num_columns])
valid_x_num = scaler.transform(valid_x[num_columns])
test_x_num = scaler.transform(test_x[num_columns])

train_x_preprocessed = np.concatenate([train_x_cat, train_x_num], axis = 1)
valid_x_preprocessed = np.concatenate([valid_x_cat, valid_x_num], axis = 1)
test_x_preprocessed = np.concatenate([test_x_cat, test_x_num], axis = 1)

#모델 적합
from sklearn.ensemble import RandomForestClassifier
rf = RandomForestClassifier(random_state = 1)
rf.fit(train_x_preprocessed, train_y)

#검증

from sklearn.metrics import roc_auc_score
pred_val = rf.predict_proba(valid_x_preprocessed)[:, 1]
print("valid aux :", roc_auc_score(valid_y, pred_val))

#테스트
test_pred = rf.predict_proba(test_x_preprocessed)[:, 1]
test_pred = pd.DataFrame(test, columns = ['pred'])
result = pd.concat([test_id, test_pred], axis = 1)

print(result.head())
result.to_csv('-', index = False)